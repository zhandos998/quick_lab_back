{
    "openapi": "3.0.0",
    "info": {
        "title": "API Documentation",
        "version": "0.1"
    },
    "servers": [
        {
            "url": "http://127.0.0.1:8000",
            "description": "SuperMakers"
        }
    ],
    "paths": {
        "/api/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "description": "Register a new user with required information",
                "operationId": "registerUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password",
                                    "password_confirmation",
                                    "phone",
                                    "username",
                                    "city_id",
                                    "firstname",
                                    "lastname",
                                    "iin",
                                    "role"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "johndoe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "johndoe"
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "firstname": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "lastname": {
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "iin": {
                                        "type": "string",
                                        "maxLength": 12,
                                        "example": "123456789012"
                                    },
                                    "is_visible": {
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            0
                                        ],
                                        "example": 1
                                    },
                                    "photo": {
                                        "description": "Upload photo file",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "role": {
                                        "type": "string",
                                        "enum": [
                                            "master",
                                            "user"
                                        ],
                                        "example": "user"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User registered successfully"
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "johndoe@example.com"
                                                },
                                                "phone": {
                                                    "type": "string",
                                                    "example": "+1234567890"
                                                },
                                                "username": {
                                                    "type": "string",
                                                    "example": "johndoe"
                                                },
                                                "city_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "firstname": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "lastname": {
                                                    "type": "string",
                                                    "example": "Doe"
                                                },
                                                "iin": {
                                                    "type": "string",
                                                    "example": "123456789012"
                                                },
                                                "is_visible": {
                                                    "type": "integer",
                                                    "enum": [
                                                        1,
                                                        0
                                                    ],
                                                    "example": 1
                                                },
                                                "photo_url": {
                                                    "type": "string",
                                                    "example": "/storage/photos/abc123.jpg"
                                                },
                                                "role": {
                                                    "type": "string",
                                                    "example": "user"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "description": "Authenticate user and provide a token",
                "operationId": "loginUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "johndoe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "type": "string",
                                            "example": "abc123token"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ],
                                                "password": [
                                                    "The password field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User logout",
                "description": "Logs out the authenticated user and deletes their current access token",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/password/reset-link": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Send password reset link",
                "description": "Sends a password reset link to the user's email",
                "operationId": "sendResetLink",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset link sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Ссылка на сброс пароля отправлена на ваш email."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "email": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "The email field is required."
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to send password reset link",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Не удалось отправить ссылку на сброс пароля."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/password/reset": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Reset password",
                "description": "Resets the user's password using a reset token",
                "operationId": "resetPassword",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "token",
                                    "email",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "token": {
                                        "type": "string",
                                        "example": "abcdef123456"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "newpassword123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "newpassword123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Пароль успешно изменен."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "The token field is required."
                                            }
                                        },
                                        "email": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "The email field is required."
                                            }
                                        },
                                        "password": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "The password must be at least 8 characters."
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to reset password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Не удалось сбросить пароль."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/user": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get current user information",
                "description": "Returns information about the currently authenticated user",
                "operationId": "getUserInfo",
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "johndoe@example.com"
                                        },
                                        "phone": {
                                            "type": "string",
                                            "example": "+1234567890"
                                        },
                                        "username": {
                                            "type": "string",
                                            "example": "johndoe"
                                        },
                                        "city_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "firstname": {
                                            "type": "string",
                                            "example": "John"
                                        },
                                        "lastname": {
                                            "type": "string",
                                            "example": "Doe"
                                        },
                                        "iin": {
                                            "type": "string",
                                            "example": "123456789012"
                                        },
                                        "is_visible": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "photo_url": {
                                            "type": "string",
                                            "example": "/storage/photos/johndoe.jpg"
                                        },
                                        "role": {
                                            "type": "string",
                                            "example": "user"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2023-01-01T12:00:00Z"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2023-01-01T12:00:00Z"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/cities": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get list of cities",
                "description": "Returns a list of all cities.",
                "operationId": "185d0aefb5fd6e9d4e5f1263e2734df4",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Cities"
                ],
                "summary": "Create a new city",
                "description": "Adds a new city to the database",
                "operationId": "2c088ea7c660d40e5d092a82ee72e2eb",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "country_id"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Almaty"
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "City created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/cities/{id}": {
            "get": {
                "tags": [
                    "Cities"
                ],
                "summary": "Get a city by ID",
                "description": "Returns a single city",
                "operationId": "87b6e2f2af6fbfa74374d2f9e3512d76",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of city to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "City found"
                    },
                    "404": {
                        "description": "City not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Cities"
                ],
                "summary": "Update an existing city",
                "description": "Updates city details by ID",
                "operationId": "f7f6f540808f4308195e750cfb3849f8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of city to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Astana"
                                    },
                                    "country_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "City updated"
                    },
                    "404": {
                        "description": "City not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Cities"
                ],
                "summary": "Delete a city",
                "description": "Deletes a city by ID",
                "operationId": "0dc95dd0bc4da8cabcb3ebd5b105a59b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of city to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "City deleted"
                    },
                    "404": {
                        "description": "City not found"
                    }
                }
            }
        },
        "/api/company-types": {
            "get": {
                "tags": [
                    "Company Types"
                ],
                "summary": "Get list of company types",
                "description": "Returns a list of all company types.",
                "operationId": "4a80dd7fd6aa851fdbd3ed76fb95f593",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Company Types"
                ],
                "summary": "Create a new company type",
                "description": "Adds a new company type to the database",
                "operationId": "91a447a33f2b7af034ff727563f43f1f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "LLC"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Limited Liability Company"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Company type created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/company-types/{id}": {
            "get": {
                "tags": [
                    "Company Types"
                ],
                "summary": "Get a company type by ID",
                "description": "Returns a single company type",
                "operationId": "7e1a75be4c58468cb67334f5b0905fa8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of company type to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company type found"
                    },
                    "404": {
                        "description": "Company type not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Company Types"
                ],
                "summary": "Update an existing company type",
                "description": "Updates company type details by ID",
                "operationId": "aedad6474bd4228d39659c7de2bf0533",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of company type to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Corp"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Corporation"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Company type updated"
                    },
                    "404": {
                        "description": "Company type not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Company Types"
                ],
                "summary": "Delete a company type",
                "description": "Deletes a company type by ID",
                "operationId": "fb12cfeb8e153cdc79bbcb6f99dd6ce6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of company type to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Company type deleted"
                    },
                    "404": {
                        "description": "Company type not found"
                    }
                }
            }
        },
        "/api/countries": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get list of countries",
                "description": "Returns a list of all countries.",
                "operationId": "bbb90b9e86a9cab92aaa448fe98954c9",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Countries"
                ],
                "summary": "Create a new country",
                "description": "Adds a new country to the database",
                "operationId": "575eed1b82f384d950b5b4541e3f2c50",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "code"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Kazakhstan"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "KZ"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Country created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/countries/{id}": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get a country by ID",
                "description": "Returns a single country",
                "operationId": "c172dfb1b3785a376f52b0f46f344f20",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of country to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Country found"
                    },
                    "404": {
                        "description": "Country not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Countries"
                ],
                "summary": "Update an existing country",
                "description": "Updates country details by ID",
                "operationId": "0c6426c4d0dfc8c5a372bad4825a38bc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of country to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Kazakhstan"
                                    },
                                    "code": {
                                        "type": "string",
                                        "example": "KZ"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Country updated"
                    },
                    "404": {
                        "description": "Country not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Countries"
                ],
                "summary": "Delete a country",
                "description": "Deletes a country by ID",
                "operationId": "47110a2e95266d7e013ca957c8e9dbb3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of country to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Country deleted"
                    },
                    "404": {
                        "description": "Country not found"
                    }
                }
            }
        },
        "/api/default-answers": {
            "get": {
                "tags": [
                    "Default Answers"
                ],
                "summary": "Get a list of default answers",
                "description": "Returns a list of all default answers.",
                "operationId": "810ed4e058a798795773d6f5ca05a2a6",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Default Answers"
                ],
                "summary": "Create a new default answer",
                "description": "Creates a new default answer",
                "operationId": "d56eb89bd46eece9eb5848e4d0fe3472",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "question_id",
                                    "answer"
                                ],
                                "properties": {
                                    "question_id": {
                                        "description": "ID of the question this answer is associated with",
                                        "type": "integer"
                                    },
                                    "answer": {
                                        "description": "Text of the default answer",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Default answer created successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/default-answers/{id}": {
            "get": {
                "tags": [
                    "Default Answers"
                ],
                "summary": "Get a default answer by ID",
                "description": "Returns a single default answer",
                "operationId": "26b8213da0e77e886b08227a505e61c5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the default answer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Default answer not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Default Answers"
                ],
                "summary": "Update a default answer",
                "description": "Updates an existing default answer",
                "operationId": "b387177ae09f856328f6670eded33f14",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the default answer to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "question_id": {
                                        "description": "ID of the question this answer is associated with",
                                        "type": "integer"
                                    },
                                    "answer": {
                                        "description": "Text of the default answer",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Default answer updated successfully"
                    },
                    "404": {
                        "description": "Default answer not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Default Answers"
                ],
                "summary": "Delete a default answer",
                "description": "Deletes a default answer by ID",
                "operationId": "ee449ec0a98b858d04d6d88a8505c944",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the default answer to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Default answer deleted successfully"
                    },
                    "404": {
                        "description": "Default answer not found"
                    }
                }
            }
        },
        "/api/favorites": {
            "get": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Get a list of favorites",
                "description": "Returns a list of all favorite items for the authenticated user.",
                "operationId": "bc433e786ab5a0bec81c53c578e0b6aa",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Add a favorite item",
                "description": "Adds a new item to the user's favorites list",
                "operationId": "d426a8b38354581cb4082ac4bc62e22f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "item_id"
                                ],
                                "properties": {
                                    "item_id": {
                                        "description": "ID of the item to favorite",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Favorite item created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/favorites/{id}": {
            "delete": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Remove a favorite item",
                "description": "Removes an item from the user's favorites list",
                "operationId": "397d5ad2363742284a8d87c5dc366148",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the favorite item to remove",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Favorite item deleted"
                    },
                    "404": {
                        "description": "Favorite item not found"
                    }
                }
            }
        },
        "/api/orders": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get a list of orders",
                "description": "Returns a list of all orders.",
                "operationId": "955bb77a45ae173a485fadb8befed93f",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new order",
                "description": "Adds a new order to the database",
                "operationId": "2123ba58dadb22bd6f2c8081af562230",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "customer_id",
                                    "status_id",
                                    "total"
                                ],
                                "properties": {
                                    "customer_id": {
                                        "description": "ID of the customer",
                                        "type": "integer"
                                    },
                                    "status_id": {
                                        "description": "ID of the order status",
                                        "type": "integer"
                                    },
                                    "total": {
                                        "description": "Total amount of the order",
                                        "type": "number",
                                        "format": "float"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/orders/{id}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get an order by ID",
                "description": "Returns a single order",
                "operationId": "88d27387b1e409e075c18609d4a0c300",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order found"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Orders"
                ],
                "summary": "Update an existing order",
                "description": "Updates order details by ID",
                "operationId": "38a1b85e8294795a1b0dc438a36e319f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status_id": {
                                        "description": "Updated status ID",
                                        "type": "integer"
                                    },
                                    "total": {
                                        "description": "Updated total amount",
                                        "type": "number",
                                        "format": "float"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Order updated"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Orders"
                ],
                "summary": "Delete an order",
                "description": "Deletes an order by ID",
                "operationId": "bab875a1ed962fb33565ab9b48c0d494",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Order deleted"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/order-statuses": {
            "get": {
                "tags": [
                    "Order Statuses"
                ],
                "summary": "Get a list of order statuses",
                "description": "Returns a list of all order statuses.",
                "operationId": "a0768c3dec8ec6318a8c948fb510da97",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Order Statuses"
                ],
                "summary": "Create a new order status",
                "description": "Adds a new order status to the database",
                "operationId": "0bfcd3ebfc6815994bed2c34a457f193",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Name of the order status",
                                        "type": "string",
                                        "example": "Pending"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order status created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/order-statuses/{id}": {
            "get": {
                "tags": [
                    "Order Statuses"
                ],
                "summary": "Get an order status by ID",
                "description": "Returns a single order status",
                "operationId": "1b074f12c7d1e77fed2b03df06a6f66e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order status to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order status found"
                    },
                    "404": {
                        "description": "Order status not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Order Statuses"
                ],
                "summary": "Update an existing order status",
                "description": "Updates order status details by ID",
                "operationId": "61ab953672a987032040a8a242d35894",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order status to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Updated name of the order status",
                                        "type": "string",
                                        "example": "Shipped"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Order status updated"
                    },
                    "404": {
                        "description": "Order status not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Order Statuses"
                ],
                "summary": "Delete an order status",
                "description": "Deletes an order status by ID",
                "operationId": "48d5c8e3fceac02b58cd4e1c991c588d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order status to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Order status deleted"
                    },
                    "404": {
                        "description": "Order status not found"
                    }
                }
            }
        },
        "/api/payments": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "Get a list of payments",
                "description": "Returns a list of all payments.",
                "operationId": "afcbc19a07bf33c2fcb73b5c438b476c",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Create a new payment",
                "description": "Adds a new payment to the database",
                "operationId": "985b848b4cb6ca6115cf4ea71e314c0c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "amount",
                                    "user_id",
                                    "payment_status_id"
                                ],
                                "properties": {
                                    "amount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100.5
                                    },
                                    "user_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "payment_status_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Payment for services"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/payments/{id}": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "Get a payment by ID",
                "description": "Returns a single payment",
                "operationId": "33da95d13a42b4c3898427d7cb9516a8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment found"
                    },
                    "404": {
                        "description": "Payment not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Payments"
                ],
                "summary": "Update an existing payment",
                "description": "Updates payment details by ID",
                "operationId": "4e85438414b16b3c35ad3776c5ccc11f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "amount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 150.75
                                    },
                                    "user_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "payment_status_id": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated payment description"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment updated"
                    },
                    "404": {
                        "description": "Payment not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Payments"
                ],
                "summary": "Delete a payment",
                "description": "Deletes a payment by ID",
                "operationId": "4db359e13e73e2832ead474820546c40",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Payment deleted"
                    },
                    "404": {
                        "description": "Payment not found"
                    }
                }
            }
        },
        "/api/payment-statuses": {
            "get": {
                "tags": [
                    "Payment Statuses"
                ],
                "summary": "Get a list of payment statuses",
                "description": "Returns a list of all payment statuses.",
                "operationId": "3b5bf463bebe2112722517b12cd5627d",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Payment Statuses"
                ],
                "summary": "Create a new payment status",
                "description": "Adds a new payment status to the database",
                "operationId": "6206ca1f77d8143062d8ef7bbe2e029b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Paid"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Payment has been completed"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment status created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/payment-statuses/{id}": {
            "get": {
                "tags": [
                    "Payment Statuses"
                ],
                "summary": "Get a payment status by ID",
                "description": "Returns a single payment status",
                "operationId": "17ee5abdc5991e8b1b60bd588e71c073",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment status to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment status found"
                    },
                    "404": {
                        "description": "Payment status not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Payment Statuses"
                ],
                "summary": "Update an existing payment status",
                "description": "Updates payment status details by ID",
                "operationId": "22d9278c7528f6943bc4919d7eacf0f7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment status to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Paid Updated"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Payment has been completed and verified"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment status updated"
                    },
                    "404": {
                        "description": "Payment status not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Payment Statuses"
                ],
                "summary": "Delete a payment status",
                "description": "Deletes a payment status by ID",
                "operationId": "d9e4d3f4faeab3b4e1af8dd4066a9dce",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment status to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Payment status deleted"
                    },
                    "404": {
                        "description": "Payment status not found"
                    }
                }
            }
        },
        "/api/questions": {
            "get": {
                "tags": [
                    "Questions"
                ],
                "summary": "Get a list of questions",
                "description": "Returns a list of all questions.",
                "operationId": "860331f8e4b6d740293483a82e52fc5a",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Questions"
                ],
                "summary": "Create a new question",
                "description": "Creates a new question",
                "operationId": "5b8990f331654a60cfd5e3914d7e07a3",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "survey_id",
                                    "text"
                                ],
                                "properties": {
                                    "survey_id": {
                                        "description": "ID of the survey the question belongs to",
                                        "type": "integer"
                                    },
                                    "text": {
                                        "description": "Text of the question",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "Type of the question (e.g., text, multiple choice)",
                                        "type": "string"
                                    },
                                    "options": {
                                        "description": "List of answer options for multiple choice questions",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Question created successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/questions/{id}": {
            "get": {
                "tags": [
                    "Questions"
                ],
                "summary": "Get a question by ID",
                "description": "Returns a single question",
                "operationId": "fb7e0422bc357dd72ecfaa07729c41c1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the question",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Question not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Questions"
                ],
                "summary": "Update a question",
                "description": "Updates an existing question",
                "operationId": "f07ecaa8b2a907cc3231481f1a06b704",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the question to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "survey_id": {
                                        "description": "ID of the survey the question belongs to",
                                        "type": "integer"
                                    },
                                    "text": {
                                        "description": "Text of the question",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "Type of the question (e.g., text, multiple choice)",
                                        "type": "string"
                                    },
                                    "options": {
                                        "description": "List of answer options for multiple choice questions",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Question updated successfully"
                    },
                    "404": {
                        "description": "Question not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Questions"
                ],
                "summary": "Delete a question",
                "description": "Deletes a question by ID",
                "operationId": "2cde4cbb83a9fc1d3660444e77750195",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the question to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Question deleted successfully"
                    },
                    "404": {
                        "description": "Question not found"
                    }
                }
            }
        },
        "/api/ratings": {
            "get": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Get a list of ratings",
                "description": "Returns a list of all ratings.",
                "operationId": "b24d88aeea102065c5a101d3d1ff06d5",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Create a new rating",
                "description": "Adds a new rating to the database",
                "operationId": "5cd8244a0d463d65c3d4aff9bb590d0f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "value",
                                    "user_id",
                                    "product_id"
                                ],
                                "properties": {
                                    "value": {
                                        "description": "Rating value",
                                        "type": "integer",
                                        "example": 4
                                    },
                                    "user_id": {
                                        "description": "ID of the user",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "product_id": {
                                        "description": "ID of the product",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Rating created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/ratings/{id}": {
            "get": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Get a rating by ID",
                "description": "Returns a single rating",
                "operationId": "a23bc6dde24ed9bb926230d01bf5a660",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the rating to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rating found"
                    },
                    "404": {
                        "description": "Rating not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Update an existing rating",
                "description": "Updates rating details by ID",
                "operationId": "ca59d81cdb79286ecfa7d4a5740e54b4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the rating to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "value": {
                                        "description": "Updated rating value",
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "user_id": {
                                        "description": "ID of the user",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "product_id": {
                                        "description": "ID of the product",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Rating updated"
                    },
                    "404": {
                        "description": "Rating not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Ratings"
                ],
                "summary": "Delete a rating",
                "description": "Deletes a rating by ID",
                "operationId": "680f19ca694f23859ba125a877cfbfe8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the rating to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Rating deleted"
                    },
                    "404": {
                        "description": "Rating not found"
                    }
                }
            }
        },
        "/api/roles": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get list of roles",
                "operationId": "ca86f0a206144dfbd695b749b4b28f9d",
                "responses": {
                    "200": {
                        "description": "List of roles"
                    }
                }
            },
            "post": {
                "tags": [
                    "Roles"
                ],
                "summary": "Create a new role",
                "operationId": "341b8b162b61267c7bd187500aea5bc4",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Admin"
                                    },
                                    "slug": {
                                        "type": "string",
                                        "example": "admin"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Role created successfully"
                    },
                    "400": {
                        "description": "Validation errors"
                    }
                }
            }
        },
        "/api/roles/{id}": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get role by ID",
                "operationId": "15c404caf238f1861c81f68205d328e5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role data"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Roles"
                ],
                "summary": "Update role",
                "operationId": "c73ab816ae8fb7c34a995d37ba577082",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Admin"
                                    },
                                    "slug": {
                                        "type": "string",
                                        "example": "admin"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Role updated successfully"
                    },
                    "404": {
                        "description": "Role not found"
                    },
                    "400": {
                        "description": "Validation errors"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Roles"
                ],
                "summary": "Delete role",
                "operationId": "ffa6ef115d86b00cc6c54a6210019f9c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted successfully"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                }
            }
        },
        "/api/stores": {
            "get": {
                "tags": [
                    "Stores"
                ],
                "summary": "Get a list of stores",
                "description": "Returns a list of all stores.",
                "operationId": "e831a4b9bd976ace0737af46366d12dd",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Stores"
                ],
                "summary": "Create a new store",
                "description": "Adds a new store to the database",
                "operationId": "4a83023e072675c6efe83f8e431a1cf5",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "location"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "SuperMart"
                                    },
                                    "location": {
                                        "type": "string",
                                        "example": "123 Main St"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "A local grocery store"
                                    },
                                    "owner_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Store created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/stores/{id}": {
            "get": {
                "tags": [
                    "Stores"
                ],
                "summary": "Get a store by ID",
                "description": "Returns a single store",
                "operationId": "ea10b0258052408368719189a3cb8297",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of store to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Store found"
                    },
                    "404": {
                        "description": "Store not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Stores"
                ],
                "summary": "Update an existing store",
                "description": "Updates store details by ID",
                "operationId": "4a346060fd92e05694c2d85ade5c5b0e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of store to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "SuperMart Updated"
                                    },
                                    "location": {
                                        "type": "string",
                                        "example": "456 Main St"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "An updated local grocery store"
                                    },
                                    "owner_id": {
                                        "type": "integer",
                                        "example": 2
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Store updated"
                    },
                    "404": {
                        "description": "Store not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Stores"
                ],
                "summary": "Delete a store",
                "description": "Deletes a store by ID",
                "operationId": "e27c62be54a20ed14a4d105410f4ad64",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of store to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Store deleted"
                    },
                    "404": {
                        "description": "Store not found"
                    }
                }
            }
        },
        "/api/surveys": {
            "get": {
                "tags": [
                    "Surveys"
                ],
                "summary": "Get a list of surveys",
                "description": "Returns a list of all surveys.",
                "operationId": "ac58497c90e6afa386329466fa1f5db2",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Surveys"
                ],
                "summary": "Create a new survey",
                "description": "Creates a new survey",
                "operationId": "ce9e02ee61de80a47635caad8e5bd1fe",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "description"
                                ],
                                "properties": {
                                    "title": {
                                        "description": "Title of the survey",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "Description of the survey",
                                        "type": "string"
                                    },
                                    "questions": {
                                        "description": "List of survey questions",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Survey created successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/surveys/{id}": {
            "get": {
                "tags": [
                    "Surveys"
                ],
                "summary": "Get a survey by ID",
                "description": "Returns a single survey",
                "operationId": "a635bd7a1881c50787e40563bd6c5d10",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the survey",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Survey not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Surveys"
                ],
                "summary": "Update a survey",
                "description": "Updates an existing survey",
                "operationId": "8c298ba5a9874da71a9f7dfd4b99a399",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the survey to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "description": "Title of the survey",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "Description of the survey",
                                        "type": "string"
                                    },
                                    "questions": {
                                        "description": "List of survey questions",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Survey updated successfully"
                    },
                    "404": {
                        "description": "Survey not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Surveys"
                ],
                "summary": "Delete a survey",
                "description": "Deletes a survey by ID",
                "operationId": "78752343bbaba615e5b9a2580bb64244",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the survey to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Survey deleted successfully"
                    },
                    "404": {
                        "description": "Survey not found"
                    }
                }
            }
        },
        "/api/tags": {
            "get": {
                "tags": [
                    "Tags"
                ],
                "summary": "Get a list of tags",
                "description": "Returns a list of all tags.",
                "operationId": "65f85cc85cd13d2454b6c88ffff5cc3a",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tags"
                ],
                "summary": "Create a new tag",
                "description": "Adds a new tag to the database",
                "operationId": "467bf3e5824fd78f9cdfb70c0ba9b172",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "New Tag"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "This is a new tag"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tag created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/tags/{id}": {
            "get": {
                "tags": [
                    "Tags"
                ],
                "summary": "Get a tag by ID",
                "description": "Returns a single tag",
                "operationId": "7dfec953833476181cb9da3ada88ce76",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the tag to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag found"
                    },
                    "404": {
                        "description": "Tag not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Tags"
                ],
                "summary": "Update an existing tag",
                "description": "Updates tag details by ID",
                "operationId": "ad61cc1b60600b578f626a615aec1e46",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the tag to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Tag"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "This is an updated tag description"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tag updated"
                    },
                    "404": {
                        "description": "Tag not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tags"
                ],
                "summary": "Delete a tag",
                "description": "Deletes a tag by ID",
                "operationId": "556f3044efa071c0209e19df24a54e3d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the tag to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Tag deleted"
                    },
                    "404": {
                        "description": "Tag not found"
                    }
                }
            }
        },
        "/api/user-answers": {
            "get": {
                "tags": [
                    "User Answers"
                ],
                "summary": "Get a list of user answers",
                "description": "Returns a list of all user answers.",
                "operationId": "d0dc228b56b14d9d200aca0e4382c1e9",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "User Answers"
                ],
                "summary": "Create a new user answer",
                "description": "Creates a new user answer",
                "operationId": "56753bafbcab39eb32b1e879b019d352",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "user_id",
                                    "question_id",
                                    "answer"
                                ],
                                "properties": {
                                    "user_id": {
                                        "description": "ID of the user",
                                        "type": "integer"
                                    },
                                    "question_id": {
                                        "description": "ID of the question this answer is associated with",
                                        "type": "integer"
                                    },
                                    "answer": {
                                        "description": "Text of the user answer",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User answer created successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/user-answers/{id}": {
            "get": {
                "tags": [
                    "User Answers"
                ],
                "summary": "Get a user answer by ID",
                "description": "Returns a single user answer",
                "operationId": "d76f9505e1869a023c56479bd8b7d9f7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user answer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "User answer not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "User Answers"
                ],
                "summary": "Update a user answer",
                "description": "Updates an existing user answer",
                "operationId": "b1adb34ca772413a16a20966a7f38796",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user answer to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "description": "ID of the user",
                                        "type": "integer"
                                    },
                                    "question_id": {
                                        "description": "ID of the question this answer is associated with",
                                        "type": "integer"
                                    },
                                    "answer": {
                                        "description": "Text of the user answer",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User answer updated successfully"
                    },
                    "404": {
                        "description": "User answer not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User Answers"
                ],
                "summary": "Delete a user answer",
                "description": "Deletes a user answer by ID",
                "operationId": "10e8a7bb816c39445d0f3b7832661071",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user answer to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User answer deleted successfully"
                    },
                    "404": {
                        "description": "User answer not found"
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "566aed8efb436ca506e0ef51a032ecd9",
                "responses": {
                    "200": {
                        "description": "A list of users"
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Store a newly created user",
                "operationId": "be551c1d694a01c164966f58bfa77013",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "firstname",
                                    "lastname",
                                    "email",
                                    "password",
                                    "is_visible",
                                    "phone",
                                    "username",
                                    "city_id",
                                    "iin",
                                    "password_confirmation",
                                    "role"
                                ],
                                "properties": {
                                    "firstname": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "lastname": {
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "johndoe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "johndoe"
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "iin": {
                                        "type": "string",
                                        "maxLength": 12,
                                        "example": "123456789012"
                                    },
                                    "is_visible": {
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            0
                                        ],
                                        "example": 1
                                    },
                                    "photo": {
                                        "description": "Photo file upload",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "role": {
                                        "type": "string",
                                        "enum": [
                                            "master",
                                            "user"
                                        ],
                                        "example": "master"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/users/create": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Show the form for creating a new user",
                "operationId": "5d2c5725d1a6840e1a501dace7416ecb",
                "responses": {
                    "200": {
                        "description": "Show form to create user"
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Display the specified user",
                "operationId": "6f51bd5fa2dddcd25e44cfa53dcbd10a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details"
                    },
                    "400": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update user information",
                "description": "Update user profile details",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "firstname": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "lastname": {
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "johndoe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "johndoe"
                                    },
                                    "city_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "iin": {
                                        "type": "string",
                                        "maxLength": 12,
                                        "example": "123456789012"
                                    },
                                    "is_visible": {
                                        "type": "integer",
                                        "enum": [
                                            1,
                                            0
                                        ],
                                        "example": 1
                                    },
                                    "photo": {
                                        "description": "Photo file upload",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "role": {
                                        "type": "string",
                                        "enum": [
                                            "master",
                                            "user"
                                        ],
                                        "example": "master"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove the specified user",
                "operationId": "0b4133ed462528a5e648b88ead11e929",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "400": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/users/{id}/edit": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Show the form for editing the specified user",
                "operationId": "e96f36d3b8d61fb34d4191ec4fb4fe44",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show form to edit user"
                    }
                }
            }
        },
        "/api/variables": {
            "get": {
                "tags": [
                    "Variables"
                ],
                "summary": "Get a list of variables",
                "description": "Returns a list of all variables.",
                "operationId": "c5345d1554561a9a76f66af50e9d97b3",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Variables"
                ],
                "summary": "Create a new variable",
                "description": "Adds a new variable to the database",
                "operationId": "e09bba3715b16661a0342b69a05befc3",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "value"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Sample Variable"
                                    },
                                    "value": {
                                        "type": "string",
                                        "example": "Sample Value"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Variable created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/variables/{id}": {
            "get": {
                "tags": [
                    "Variables"
                ],
                "summary": "Get a variable by ID",
                "description": "Returns a single variable",
                "operationId": "975d46bc50c5413e4ec5cc864b73b78b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the variable to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Variable found"
                    },
                    "404": {
                        "description": "Variable not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Variables"
                ],
                "summary": "Update an existing variable",
                "description": "Updates variable details by ID",
                "operationId": "4606b774f6738f7fe77bbb6fb1d8a9ca",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the variable to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Variable"
                                    },
                                    "value": {
                                        "type": "string",
                                        "example": "Updated Value"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Variable updated"
                    },
                    "404": {
                        "description": "Variable not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Variables"
                ],
                "summary": "Delete a variable",
                "description": "Deletes a variable by ID",
                "operationId": "17a1f91f96b385eaefb3f2411564bc02",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the variable to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Variable deleted"
                    },
                    "404": {
                        "description": "Variable not found"
                    }
                }
            }
        },
        "/api/videos": {
            "get": {
                "tags": [
                    "Videos"
                ],
                "summary": "Get a list of videos",
                "description": "Returns a list of all videos.",
                "operationId": "2090c29a8b2a49778e2de02f54ec7606",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Videos"
                ],
                "summary": "Create a new video",
                "description": "Adds a new video to the database",
                "operationId": "904069e3a71065b7227cc44e7dc50fb2",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "description",
                                    "url"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Sample Video"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "This is a sample video description."
                                    },
                                    "url": {
                                        "type": "string",
                                        "example": "http://example.com/sample-video.mp4"
                                    },
                                    "thumbnail": {
                                        "description": "Thumbnail image file upload",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Video created"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/videos/{id}": {
            "get": {
                "tags": [
                    "Videos"
                ],
                "summary": "Get a video by ID",
                "description": "Returns a single video",
                "operationId": "d5190024e38b00df6680e59ca8a482b2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the video to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Video found"
                    },
                    "404": {
                        "description": "Video not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Videos"
                ],
                "summary": "Update an existing video",
                "description": "Updates video details by ID",
                "operationId": "296d69c432834f8ae560cc6917ad3d87",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the video to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Updated Video Title"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "This is an updated video description."
                                    },
                                    "url": {
                                        "type": "string",
                                        "example": "http://example.com/updated-video.mp4"
                                    },
                                    "thumbnail": {
                                        "description": "Updated thumbnail file upload",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Video updated"
                    },
                    "404": {
                        "description": "Video not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Videos"
                ],
                "summary": "Delete a video",
                "description": "Deletes a video by ID",
                "operationId": "b8887a2f4df0b20670119bbb04b51e11",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the video to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Video deleted"
                    },
                    "404": {
                        "description": "Video not found"
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "Auth",
            "description": "Auth"
        },
        {
            "name": "User",
            "description": "User"
        },
        {
            "name": "Cities",
            "description": "Cities"
        },
        {
            "name": "Company Types",
            "description": "Company Types"
        },
        {
            "name": "Countries",
            "description": "Countries"
        },
        {
            "name": "Default Answers",
            "description": "Default Answers"
        },
        {
            "name": "Favorites",
            "description": "Favorites"
        },
        {
            "name": "Orders",
            "description": "Orders"
        },
        {
            "name": "Order Statuses",
            "description": "Order Statuses"
        },
        {
            "name": "Payments",
            "description": "Payments"
        },
        {
            "name": "Payment Statuses",
            "description": "Payment Statuses"
        },
        {
            "name": "Questions",
            "description": "Questions"
        },
        {
            "name": "Ratings",
            "description": "Ratings"
        },
        {
            "name": "Roles",
            "description": "Roles"
        },
        {
            "name": "Stores",
            "description": "Stores"
        },
        {
            "name": "Surveys",
            "description": "Surveys"
        },
        {
            "name": "Tags",
            "description": "Tags"
        },
        {
            "name": "User Answers",
            "description": "User Answers"
        },
        {
            "name": "Variables",
            "description": "Variables"
        },
        {
            "name": "Videos",
            "description": "Videos"
        }
    ]
}